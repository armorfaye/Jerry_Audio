#include <driver/i2s.h>
#include <SPIFFS.h>
#include <WiFi.h>
#include <WebServer.h>

const char* ssid = "Xiaomi 14";
const char* password = "syp123456";
uint16_t serverPort = 8100;

#define I2S_WS 17
#define I2S_SD 7
#define I2S_SCK 4

#define I2S_PORT I2S_NUM_0

#define SAMPLE_RATE 16000
#define SAMPLE_BITS 16
#define CHANNELS 1
#define RECORD_TIME 6  // seconds

const int BUFFER_SIZE = 1024;
const int RECORD_SIZE = SAMPLE_RATE * RECORD_TIME * CHANNELS * (SAMPLE_BITS / 8);

File file;
const char filename[] = "/recording.wav";
WebServer server(serverPort);

void setup() {
  Serial.begin(115200);
  SPIFFSInit();
  i2sInit();
  WifiInit();
  serverInit();
}

void loop() {
  server.handleClient();
}

void i2sInit() {
  i2s_config_t i2s_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),
    .sample_rate = SAMPLE_RATE,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
    .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
    .communication_format = I2S_COMM_FORMAT_STAND_I2S,
    .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
    .dma_buf_count = 8,
    .dma_buf_len = BUFFER_SIZE,
    .use_apll = false,
    .tx_desc_auto_clear = false,
    .fixed_mclk = 0
  };

  i2s_pin_config_t pin_config = {
    .bck_io_num = I2S_SCK,
    .ws_io_num = I2S_WS,
    .data_out_num = I2S_PIN_NO_CHANGE,
    .data_in_num = I2S_SD
  };

  i2s_driver_install(I2S_PORT, &i2s_config, 0, NULL);
  i2s_set_pin(I2S_PORT, &pin_config);
}

void WifiInit() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

void serverInit() {
  server.on("/audio", HTTP_POST, handleAudioRequest);
  server.begin();
  Serial.println("HTTP server started");
}

void handleAudioRequest() {
  recordAudio();
  File audioFile = SPIFFS.open(filename, "r");
  if (audioFile) {
    server.sendHeader("Content-Disposition", "attachment; filename=audio.wav");
    server.streamFile(audioFile, "audio/wav");
    audioFile.close();
  } else {
    server.send(500, "text/plain", "File Not Found");
  }
}

void recordAudio() {
  File file = SPIFFS.open(filename, FILE_WRITE);
  if (!file) {
    Serial.println("Failed to open file for writing");
    return;
  }

  // Write WAV header
  writeWavHeader(file, RECORD_SIZE);

  int16_t buffer[BUFFER_SIZE];
  size_t bytesRead;

  Serial.println("Recording started...");
  int remainingBytes = RECORD_SIZE;
  while (remainingBytes > 0) {
    i2s_read(I2S_PORT, buffer, sizeof(buffer), &bytesRead, portMAX_DELAY);
    if (bytesRead > 0) {
      file.write((const uint8_t*)buffer, bytesRead);
      remainingBytes -= bytesRead;
    }
  }
  Serial.println("Recording finished");

  file.close();
}

void writeWavHeader(File& file, int waveDataSize) {
  unsigned char header[44];
  unsigned long sampleRate = SAMPLE_RATE;
  unsigned int bitsPerSample = SAMPLE_BITS;
  unsigned int channels = CHANNELS;

  header[0] = 'R';
  header[1] = 'I';
  header[2] = 'F';
  header[3] = 'F';
  unsigned long fileSize = waveDataSize + 44 - 8;
  header[4] = (fileSize & 0xFF);
  header[5] = ((fileSize >> 8) & 0xFF);
  header[6] = ((fileSize >> 16) & 0xFF);
  header[7] = ((fileSize >> 24) & 0xFF);
  header[8] = 'W';
  header[9] = 'A';
  header[10] = 'V';
  header[11] = 'E';
  header[12] = 'f';
  header[13] = 'm';
  header[14] = 't';
  header[15] = ' ';
  header[16] = 16;  // Size of fmt chunk
  header[17] = 0;
  header[18] = 0;
  header[19] = 0;
  header[20] = 1;  // Audio format (1 = PCM)
  header[21] = 0;
  header[22] = channels;
  header[23] = 0;
  header[24] = (sampleRate & 0xFF);
  header[25] = ((sampleRate >> 8) & 0xFF);
  header[26] = ((sampleRate >> 16) & 0xFF);
  header[27] = ((sampleRate >> 24) & 0xFF);
  unsigned long byteRate = sampleRate * channels * (bitsPerSample / 8);
  header[28] = (byteRate & 0xFF);
  header[29] = ((byteRate >> 8) & 0xFF);
  header[30] = ((byteRate >> 16) & 0xFF);
  header[31] = ((byteRate >> 24) & 0xFF);
  header[32] = channels * (bitsPerSample / 8);  // Block align
  header[33] = 0;
  header[34] = bitsPerSample;
  header[35] = 0;
  header[36] = 'd';
  header[37] = 'a';
  header[38] = 't';
  header[39] = 'a';
  header[40] = (waveDataSize & 0xFF);
  header[41] = ((waveDataSize >> 8) & 0xFF);
  header[42] = ((waveDataSize >> 16) & 0xFF);
  header[43] = ((waveDataSize >> 24) & 0xFF);

  file.write(header, 44);
}

void SPIFFSInit() {
  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS initialization failed!");
    return;
  }
  Serial.println("SPIFFS initialized");
}